executor {
    name      = "lsf"
    queueSize = 5000000000
    perTaskReserve = true
}

process {
    resourceLimits = [
        memory: 128.GB,
        cpus  : 40,
        time  : 500.h
    ]
    memory         = "8.GB"
    time           = { 3.h * task.attempt }
    clusterOptions = ""
    scratch        = true
    beforeScript   = "module load singularity/3.7.1; unset R_LIBS; catch_term () { echo 'caught USR2/TERM signal'; set +e; false; on_exit ; } ; trap catch_term USR2 TERM"
    errorStrategy  = { task.attempt <= 3 ? 'retry' : 'ignore' }
    maxRetries     = 3

    withLabel:process_single {
        cpus   = { 1                     }
        memory = { 8.GB   * task.attempt }
        time   = { 4.h    * task.attempt }
    }
    withLabel:process_low {
        cpus   = { 2      * task.attempt }
        memory = { 16.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
    }
    withLabel:process_medium {
        cpus   = { 6      * task.attempt }
        memory = { 48.GB  * task.attempt }
        time   = { 8.h    * task.attempt }
    }
    withLabel:process_high {
        cpus   = { 12     * task.attempt }
        memory = { 96.GB  * task.attempt }
        time   = { 16.h   * task.attempt }
    }
    withLabel:process_high_memory {
        memory = { 200.GB * task.attempt }
    }
    withLabel:process_low {
        time   = { 50.h   * task.attempt }
    }
    withName: PICARD_COLLECTHSMETRICS {
        cpus   = { 2      * task.attempt }
        memory = { 16.GB  * task.attempt }
        time   = { 8.h    * task.attempt }
    }
    withName: 'AGAT_SPADDINTRONS' {
        cpus   = { 4      * task.attempt }
    }
}

params {
    reference_base = "/juno/work/ccs/cmopipeline/forte/"
    igenomes_base  = '/juno/work/tempo/cmopipeline/mskcc-igenomes/igenomes'
    targets_base   = '/juno/work/ccs/cmopipeline/forte/'
}

env {
    SPARK_LOCAL_DIRS = './'
}

singularity {
    enabled    = true
    runOptions = "-B $TMPDIR"
    autoMounts = true
    cacheDir   = "/juno/work/tempo/cmopipeline/singularity_images/"
}
